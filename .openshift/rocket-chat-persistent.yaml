---
##################
# BEGIN TEMPLATE #
##################
  kind: Template
  apiVersion: v1
  metadata:
    name: "rocket-chat"
    annotations:
      description: "Rocket.Chat with a MongoDB database running with a Persistent storage"
      tags: "quickstart,nodejs,mongodb,instant-app,kermit"
      iconClass: "icon-nodejs"
  labels: 
    template: "rocket-chat"
  objects:
###################
# Layer 2: Images #
###################

########################
# Layer 3: Deployments #
########################
########################
####### FrontEnd #######
########################
  - kind: DeploymentConfig
    apiVersion: "v1"
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
        deploymentConfig: "${APPLICATION_NAME}"
      annotations:
        description: "Defines how to deploy the frontend server"
    spec:
      replicas: 1
      selector:
        app: "${APPLICATION_NAME}"
        deploymentconfig: "${APPLICATION_NAME}"
      strategy:
        type: "Rolling"
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
        resources: {}
      template:
        metadata:
          labels:
            app: "${APPLICATION_NAME}"
            deploymentconfig: "${APPLICATION_NAME}"
        spec:
          containers:
           - name: "${APPLICATION_NAME}"
             image: rocketchat/rocket.chat:latest
             ports:
               - containerPort: 8080
                 protocol: TCP
               - containerPort: 8443
                 protocol: TCP
             env:
               - name: MONGO_URL
                 value: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}
             resources: {}
             terminationMessagePath: "/dev/termination-log"
             securityContext:
               capabilities: {}
               privileged: false
             restartPolicy: "Always"
             terminationGracePeriodSeconds: 30
             dnsPolicy: "ClusterFirst"
             imagePullPolicy: "Always"
             volumeMounts:
               - name: "${APPLICATION_NAME}-volume"
                 mountPath: "/app/uploads"
         volumes:
          - name: "${APPLICATION_NAME}-volume"
     triggers:
       - type: "ConfigChange"
       - type: "ImageChange"
         imageChangeParams:
           automatic: true
           containerNames:
             - "${APPLICATION_NAME}"
           from:
             kind: ImageStreamTag
             namespace: openshift
             name: rocket.chat:latest
########################
####### BackEnd ########
########################  
    - kind: DeploymentConfig
      apiVersion: v1
      metadata:
        name: "${DATABASE_SERVICE_NAME}"
        labels:
          app: "${APPLICATION_NAME}"
          deploymentConfig: "${DATABASE_SERVICE_NAME}"
        annotations:
          description: "Defines how to deploy the database"
      spec:
        replicas: 1
        selector:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${DATABASE_SERVICE_NAME}"
        strategy:
          type: "Recreate"
          recreateParams:
            timeoutSeconds: 600
        template:
          metadata:
            name: "${DATABASE_SERVICE_NAME}"
            labels:
              app: "${APPLICATION_NAME}"
              deploymentConfig: "${DATABASE_SERVICE_NAME}"
          spec:
            containers:
              - name: "mongodb"
                image: registry.access.redhat.com/rhscl/mongodb-26-rhel7:latest
                ports:
                  - containerPort: 27017
                    protocol: TCP
                readinessProbe:
                  initialDelaySeconds: 3
                  timeoutSeconds: 1
                  periodSeconds: 10
                  successThreshold: 1
                  failureThreshold: 3 
                  exec:
                    command:
                      - "/bin/sh"
                      - "-i"
                      - "-c"
                      - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                        --eval="quit()"
                livenessProbe:
                  initialDelaySeconds: 30
                  timeoutSeconds: 1
                  periodSeconds: 10
                  successThreshold: 1
                  failureThreshold: 3               
                  tcpSocket:
                    port: 27017
                env:
                  - name: MONGODB_USER
                    value: "${MONGODB_USER}"
                  - name: MONGODB_PASSWORD
                    value: "${MONGODB_PASSWORD}"
                  - name: MONGODB_DATABASE
                    value: "${MONGODB_DATABASE}"
                  - name: MONGODB_ADMIN_PASSWORD
                    value: "${MONGODB_ADMIN_PASSWORD}"
                resources:
                  limits:
                    memory: "${MEMORY_LIMIT}"
                terminationMessagePath: "/dev/termination-log"
                securityContext:
                  capabilities: {}
                  privileged: false
                restartPolicy: "Always"
                terminationGracePeriodSeconds: 30
                dnsPolicy: "ClusterFirst"
                imagePullPolicy: "IfNotPresent"
                volumeMounts:
                  - name: "${DATABASE_SERVICE_NAME}-volume"
                    mountPath: "/var/lib/mongodb/data"
            volumes:
              - name: "${DATABASE_SERVICE_NAME}-volume"
                persistentVolumeClaim:
                  claimName: "${DATABASE_SERVICE_NAME}-pvc"
        triggers:
          - type: "ImageChange"
            imageChangeParams:
              automatic: true
                containerNames:
                  - "mongodb"
                from:
                  kind: "ImageStreamTag"
                  namespace: "openshift"
                  name: "mongodb:latest"
          - type: ConfigChange
#########################
# Layer 4: Abstractions #
#########################
########################
### Service FrontEnd ###
######################## 
- kind: "Service"
  apiVersion: "v1"
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations: 
      description: "Exposes the database server"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: "mongo"
      protocol: TCP
      port: 27017
      targetPort: 27017
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${DATABASE_SERVICE_NAME}"
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
########################
### Service BackEnd ####
######################## 
- kind: "Service"
  apiVersion: "v1"
  metadata:
    name: "${APPLICATION_NAME}"
    annotations: 
      description: "Exposes and load balances the application pods"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
      - name: 8080-tcp
        port: 8080
        protocol: TCP
        targetPort: 8080
      - name: 8443-tcp
        port: 8443
        protocol: TCP
        targetPort: 8443
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
########################
######## Route #########
########################     
- kind: "Route"
  apiVersion: "v1"
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
    annotations:
      description: "Route for application's service"
  spec:
    host: ""
    to:
      kind: "Service"
      name:  "${APPLICATION_NAME}"
    port:
      targetPort: "8080-tcp"
########################
######## Route #########
########################     
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${VOLUME_CAPACITY}"
##############
# Parameters #
##############
parameters:
- name: "APPLICATION_NAME"
  displayName: "APPLICATION_NAME"
  description: "The name assigned to all of the objects defined in this template."
  required: true
  value: "rocket-chat"
- name: NAMESPACE
  displayName: Namespace
  description: The OpenShift Namespace where the ImageStream resides.
  value: openshift
- name: DATABASE_SERVICE_NAME
  displayName: Database Service Name
  description: The name of the OpenShift Service exposed for the database.
  value: mongodb
  required: true
- name: MONGODB_USER
  displayName: MongoDB User
  description: Username for MongoDB user that will be used for accessing the database.
  generate: expression
  from: user[A-Z0-9]{3}
  required: true
- name: MONGODB_PASSWORD
  displayName: MongoDB Password
  description: Password for the MongoDB user.
  generate: expression
  from: "[a-zA-Z0-9]{16}"
  required: true
- name: MONGODB_DATABASE
  displayName: MongoDB Database Name
  description: Name of the MongoDB database accessed.
  value: sampledb
  required: true
- name: MONGODB_ADMIN_PASSWORD
  displayName: MongoDB Admin Password
  description: Password for the database admin user.
  generate: expression
  from: "[a-zA-Z0-9]{16}"
  required: true
- name: VOLUME_CAPACITY
  displayName: Volume Capacity
  description: Volume space available for data, e.g. 512Mi, 2Gi.
  value: 1Gi
  required: true
- name: MEMORY_LIMIT
  displayName: Memory Limit
  description: Maximum amount of memory the container can use.
  value: 512Mi
