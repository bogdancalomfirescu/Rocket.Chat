---
##################
# BEGIN TEMPLATE #
##################
kind: "Template"
apiVersion: "v1"
metadata:
  name: "rocket-chat"
  annotations:
    description: "Rocket.Chat with a MongoDB database running with a Persistent storage"
    tags: "quickstart,nodejs,mongodb,instant-app,kermit"
    iconClass: "icon-nodejs"
labels: 
  template: "rocket-chat"
objects:
###################
# Layer 2: Images #
###################

########################
# Layer 3: Deployments #
########################
########################
####### FrontEnd #######
########################
- kind: "DeploymentConfig"
  apiVersion: "v1"
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      name: "${APPLICATION_NAME}"
    annotations:
      description: "Defines how to deploy the frontend server"
  spec:
    replicas: 1
    selector:
      name: "${APPLICATION_NAME}"
    strategy:
      type: "Rolling"
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
        maxUnavailable: 25%
        maxSurge: 25%
      resources: {}
    template:
      metadata:
        name: "${APPLICATION_NAME}"
        labels:
          name: "${APPLICATION_NAME}"
      spec:
        containers:
          - name: "${APPLICATION_NAME}"
            image: rocketchat/rocket.chat:latest
            ports:
              - containerPort: 3000
                protocol: TCP
            env:
              - name: MONGO_URL
                value: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}
            resources: {}
            terminationMessagePath: "/dev/termination-log"
            securityContext:
              capabilities: {}
              privileged: false
            restartPolicy: "Always"
            terminationGracePeriodSeconds: 30
            dnsPolicy: "ClusterFirst"
            imagePullPolicy: "Always"
            volumeMounts:
              - name: "${APPLICATION_NAME}-volume"
                mountPath: "/app/uploads"
        volumes:
          - name: "${APPLICATION_NAME}-volume"
    triggers:
      - type: "ConfigChange"
      - type: "ImageChange"
        imageChangeParams:
          automatic: true
          containerNames:
            - "${APPLICATION_NAME}"
          from:
            kind: ImageStreamTag
            namespace: openshift
            name: rocket.chat:latest
########################
####### BackEnd ########
########################  
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    creationTimestamp: null
    name: ${DATABASE_SERVICE_NAME}
    labels:
      name: "${DATABASE_SERVICE_NAME}"
    annotations:
      description: "Defines how to deploy the database"
  spec:
    replicas: 1
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    strategy:
      type: "Recreate"
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - capabilities: {}
          env:
          - name: MONGODB_USER
            value: ${MONGODB_USER}
          - name: MONGODB_PASSWORD
            value: ${MONGODB_PASSWORD}
          - name: MONGODB_DATABASE
            value: ${MONGODB_DATABASE}
          - name: MONGODB_ADMIN_PASSWORD
            value: ${MONGODB_ADMIN_PASSWORD}
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: "${DATABASE_SERVICE_NAME}"
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            initialDelaySeconds: 3
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: ${DATABASE_SERVICE_NAME}-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${DATABASE_SERVICE_NAME}-volume
          persistentVolumeClaim:
            claimName: ${DATABASE_SERVICE_NAME}-pvc
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:latest
          namespace: ${NAMESPACE}
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
  status: {}
#########################
# Layer 4: Abstractions #
#########################
########################
### Service FrontEnd ###
######################## 
- kind: "Service"
  apiVersion: "v1"
  metadata:
    name: "${APPLICATION_NAME}"
    annotations: 
      description: "Exposes and load balances the application pods"
  spec:
    ports:
      - name: 3000-tcp
        port: 3000
        protocol: TCP
        targetPort: 3000
    selector:
      name: "${APPLICATION_NAME}"
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
########################
### Service BackEnd ####
######################## 
- kind: "Service"
  apiVersion: "v1"
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations: 
      description: "Exposes the database server"
  spec:
    ports:
    - name: "mongo"
      protocol: TCP
      port: 27017
      targetPort: 27017
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
########################
######## Route #########
########################     
- kind: "Route"
  apiVersion: "v1"
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      name: "${APPLICATION_NAME}"
    annotations:
      description: "Route for application's service"
  spec:
    host: ""
    to:
      kind: "Service"
      name:  "${APPLICATION_NAME}"
    port:
      targetPort: "3000-tcp"
########################
######### PVC #########
########################     
- kind: "PersistentVolumeClaim"
  apiVersion: "v1"
  metadata:
    name: "${DATABASE_SERVICE_NAME}-pvc"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${VOLUME_CAPACITY}"
##############
# Parameters #
##############
parameters:
- name: "APPLICATION_NAME"
  displayName: "APPLICATION_NAME"
  description: "The name assigned to all of the objects defined in this template."
  required: true
  value: "rocket-chat"
- name: NAMESPACE
  displayName: Namespace
  description: The OpenShift Namespace where the ImageStream resides.
  value: openshift
- name: DATABASE_SERVICE_NAME
  displayName: Database Service Name
  description: The name of the OpenShift Service exposed for the database.
  value: mongodb
  required: true
- name: MONGODB_USER
  displayName: MongoDB User
  description: Username for MongoDB user that will be used for accessing the database.
  generate: expression
  from: user[A-Z0-9]{3}
  required: true
- name: MONGODB_PASSWORD
  displayName: MongoDB Password
  description: Password for the MongoDB user.
  generate: expression
  from: "[a-zA-Z0-9]{16}"
  required: true
- name: MONGODB_DATABASE
  displayName: MongoDB Database Name
  description: Name of the MongoDB database accessed.
  value: sampledb
  required: true
- name: MONGODB_ADMIN_PASSWORD
  displayName: MongoDB Admin Password
  description: Password for the database admin user.
  generate: expression
  from: "[a-zA-Z0-9]{16}"
  required: true
- name: VOLUME_CAPACITY
  displayName: Volume Capacity
  description: Volume space available for data, e.g. 512Mi, 2Gi.
  value: 1Gi
  required: true
- name: MEMORY_LIMIT
  displayName: Memory Limit
  description: Maximum amount of memory the container can use.
  value: 512Mi